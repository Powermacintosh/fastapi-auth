"""Initial

Revision ID: 001
Revises:
Create Date: 2025-08-10 16:22:58.844349

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "001"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "profiles",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_date",
            sa.DateTime().with_variant(
                postgresql.TIMESTAMP(timezone=True), "postgresql"
            ),
            nullable=False,
        ),
        sa.Column(
            "visit_date",
            sa.DateTime().with_variant(
                postgresql.TIMESTAMP(timezone=True), "postgresql"
            ),
            nullable=False,
        ),
        sa.Column("key", sa.String(length=32), nullable=False),
        sa.Column(
            "cookie_data",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column("avatar", sa.String(length=300), nullable=True),
        sa.Column(
            "locations",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column("ip", sa.String(length=45), nullable=False),
        sa.Column("user_agent", sa.String(length=255), nullable=False),
        sa.Column(
            "history", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("key"),
    )
    op.create_index(op.f("ix_profiles_id"), "profiles", ["id"], unique=False)
    op.create_table(
        "roles",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "name",
            sa.Enum(
                "CHAT",
                "GUEST",
                "OWNER",
                "USER",
                "GLOBAL_ADMIN",
                "CONTENT_ADMIN",
                name="role_enum",
            ),
            nullable=False,
        ),
        sa.Column("title_ru", sa.String(length=32), nullable=False),
        sa.Column("description_ru", sa.String(length=255), nullable=False),
        sa.Column("title_en", sa.String(length=32), nullable=False),
        sa.Column("description_en", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_roles_id"), "roles", ["id"], unique=False)
    op.create_table(
        "roles_groups",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "name",
            sa.Enum(
                "CHATS",
                "GUESTS",
                "USERS",
                "ADMINISTRATORS",
                name="role_group_enum",
            ),
            nullable=False,
        ),
        sa.Column("title_ru", sa.String(length=32), nullable=False),
        sa.Column("description_ru", sa.String(length=255), nullable=False),
        sa.Column("title_en", sa.String(length=32), nullable=False),
        sa.Column("description_en", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(
        op.f("ix_roles_groups_id"), "roles_groups", ["id"], unique=False
    )
    op.create_table(
        "webapp_users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_webapp_users_id"), "webapp_users", ["id"], unique=False
    )
    op.create_table(
        "website_users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("email", sa.String(length=150), nullable=False),
        sa.Column("password", sa.String(length=150), nullable=False),
        sa.Column(
            "register_date",
            sa.DateTime().with_variant(
                postgresql.TIMESTAMP(timezone=True), "postgresql"
            ),
            nullable=False,
        ),
        sa.Column(
            "activity_date",
            sa.DateTime().with_variant(
                postgresql.TIMESTAMP(timezone=True), "postgresql"
            ),
            nullable=False,
        ),
        sa.Column("email_confirm", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_index(
        op.f("ix_website_users_id"), "website_users", ["id"], unique=False
    )
    op.create_table(
        "roles_groups_associations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("role_group_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_group_id"],
            ["roles_groups.id"],
        ),
        sa.ForeignKeyConstraint(["role_id"], ["roles.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "role_id", "role_group_id", name="idx_unique_roles_groups"
        ),
    )
    op.create_table(
        "users_associations",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("profile_id", sa.Integer(), nullable=False),
        sa.Column("user_website_id", sa.Integer(), nullable=True),
        sa.Column("user_webapp_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["profile_id"], ["profiles.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["role_id"], ["roles.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["user_webapp_id"], ["webapp_users.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_website_id"], ["website_users.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_bot_unique_user_associations",
        "users_associations",
        ["role_id", "profile_id", "user_website_id", "user_webapp_id"],
        unique=True,
        postgresql_where=sa.text("user_website_id IS NULL"),
    )
    op.create_index(
        "idx_unique_user_associations",
        "users_associations",
        ["role_id", "profile_id", "user_website_id", "user_webapp_id"],
        unique=True,
        postgresql_where=sa.text(
            "user_website_id IS NOT NULL AND user_webapp_id IS NOT NULL"
        ),
    )
    op.create_index(
        "idx_website_unique_user_associations",
        "users_associations",
        ["role_id", "profile_id", "user_website_id", "user_webapp_id"],
        unique=True,
        postgresql_where=sa.text("user_webapp_id IS NULL"),
    )
    op.create_index(
        op.f("ix_users_associations_id"),
        "users_associations",
        ["id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_users_associations_id"), table_name="users_associations"
    )
    op.drop_index(
        "idx_website_unique_user_associations",
        table_name="users_associations",
        postgresql_where=sa.text("user_webapp_id IS NULL"),
    )
    op.drop_index(
        "idx_unique_user_associations",
        table_name="users_associations",
        postgresql_where=sa.text(
            "user_website_id IS NOT NULL AND user_webapp_id IS NOT NULL"
        ),
    )
    op.drop_index(
        "idx_bot_unique_user_associations",
        table_name="users_associations",
        postgresql_where=sa.text("user_website_id IS NULL"),
    )
    op.drop_table("users_associations")
    op.drop_table("roles_groups_associations")
    op.drop_index(op.f("ix_website_users_id"), table_name="website_users")
    op.drop_table("website_users")
    op.drop_index(op.f("ix_webapp_users_id"), table_name="webapp_users")
    op.drop_table("webapp_users")
    op.drop_index(op.f("ix_roles_groups_id"), table_name="roles_groups")
    op.drop_table("roles_groups")
    op.drop_index(op.f("ix_roles_id"), table_name="roles")
    op.drop_table("roles")
    op.drop_index(op.f("ix_profiles_id"), table_name="profiles")
    op.drop_table("profiles")
    # ### end Alembic commands ###
